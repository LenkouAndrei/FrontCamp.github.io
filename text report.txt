query db.restaurants.count()
25359

query  db.restaurants.find({ borough: "Brooklyn" }).count()
6086

part 3
query db.restaurants.findOne()
{
        "_id" : ObjectId("5c0d39c6b71996366fe0594a"),
        "address" : {
                "building" : "469",
                "coord" : [
                        -73.961704,
                        40.662942
                ],
                "street" : "Flatbush Avenue",
                "zipcode" : "11225"
        },
        "borough" : "Brooklyn",
        "cuisine" : "Hamburgers",
        "grades" : [
                {
                        "date" : ISODate("2014-12-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 8
                },
                {
                        "date" : ISODate("2014-07-01T00:00:00Z"),
                        "grade" : "B",
                        "score" : 23
                },
                {
                        "date" : ISODate("2013-04-30T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                },
                {
                        "date" : ISODate("2012-05-08T00:00:00Z"),
                        "grade" : "A",
                        "score" : 12
                }
        ],
        "name" : "Wendy'S",
        "restaurant_id" : "30112340"
}

===========================================================================================================

point 1. How many “Chinese” (cuisine) restaurants are in “Queens” (borough)? 

Query db.restaurants.find({$and: [{borough: "Queens"},{cuisine: "Chinese"}]}).count()
Result 728

===========================================================================================================

point 2. What is the _id of the restaurant which has the grade with the highest ever score? 
Query db.restaurants.find({}, {_id: 1}).sort({"grades.score": -1}).limit(1)
Result { "_id" : ObjectId("5c0d39c6b71996366fe05aa7") }

Alternative Query db.restaurants.aggregate([{$unwind: "$grades"},{$project: {"maxGradesScore" : {$max : "$grades.score"}}},{$sort: {maxGradesScore: -1}}, {$limit: 1}])
Altrnative Result { "_id" : ObjectId("5c0d39c6b71996366fe05aa7"), "maxGradesScore" : 131 }

============================================================================================================

point 3. Add a grade { grade: "A", score: 7, date: ISODate() } to every restaurant in “Manhattan” (borough).

Query db.restaurants.updateMany({borough: "Manhattan"}, {$push: {"grades" : { grade: "A", score: 7, date: ISODate() }}})

============================================================================================================

point 4. What are the names of the restaurants which have a grade at index 8 with score less then 7? Use projection to
include only names without _id. 

Query db.restaurants.find({"grades.8.score": {$lt: 7}}, {name: 1, _id: 0})
Result
{ "name" : "Silver Krust West Indian Restaurant" }
{ "name" : "Pure Food" }

==========================================================================================================

point 5.What are _id and borough of “Seafood” (cuisine) restaurants which received at least one “B” grade in period from
2014-02-01 to 2014-03-01? Use projection to include only _id and borough. 

Query db.restaurants.find({ grades: { $elemMatch: {grade: "B", date: {$gte: ISODate("2014-02-01"), $lte: ISODate("2014-03-01")} } }, cuisine: "Seafood" }, {borough: 1})
Result 
{ "_id" : ObjectId("5c0d39c7b71996366fe08eb4"), "borough" : "Bronx" }
{ "_id" : ObjectId("5c0d39c7b71996366fe0912b"), "borough" : "Manhattan" }

===========================================================================================================

TASK 4

===========================================================================================================

Point 1.Create an index which will be used by this query and provide proof (from explain() or Compass UI) that the index
is indeed used by the winning plan:
db.restaurants.find({ name: "Glorious Food" }) 

Create index
db.restaurants.createIndex({name: 1}, {name: "Glorious Food"})

Query db.restaurants.getIndexes()
Result
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "frontcamp.restaurants"
        },
        {
                "v" : 2,
                "key" : {
                        "restaurant_id" : 1
                },
                "name" : "restaurant_id_1",
                "ns" : "frontcamp.restaurants"
        },
        {
                "v" : 2,
                "key" : {
                        "name" : 1
                },
                "name" : "Glorious Food",
                "ns" : "frontcamp.restaurants"
        }
]

Query db.restaurants.find({ name: "Glorious Food" }).explain()
Result {
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "name" : {
                                "$eq" : "Glorious Food"
                        }
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "name" : 1
                                },
                                "indexName" : "Glorious Food",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "name" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "name" : [
                                                "[\"Glorious Food\", \"Glorious Food\"]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-GODHJ1I",
                "port" : 27017,
                "version" : "4.0.4",
                "gitVersion" : "f288a3bdf201007f3693c58e140056adf8b04839"
        },
        "ok" : 1
}

========================================================================================================

Point 2.Drop index from task 4.1 

Query db.restaurants.dropIndex("Glorious Food")
Result { "nIndexesWas" : 3, "ok" : 1 }

========================================================================================================

Point 3.Create an index to make this query covered and provide proof (from explain() or Compass UI) that it is indeed
covered:
db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 }) 

Create index
db.restaurants.createIndex({ restaurant_id: 1})

Query db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 })
Result { "borough" : "Queens" }

Query db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 }).explain()
Result
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "restaurant_id" : {
                                "$eq" : "41098650"
                        }
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "_id" : 0,
                                "borough" : 1
                        },
                        "inputStage" : {
                                "stage" : "FETCH",
                                "inputStage" : {
                                        "stage" : "IXSCAN",
                                        "keyPattern" : {
                                                "restaurant_id" : 1
                                        },
                                        "indexName" : "restaurant_id_1",
                                        "isMultiKey" : false,
                                        "multiKeyPaths" : {
                                                "restaurant_id" : [ ]
                                        },
                                        "isUnique" : false,
                                        "isSparse" : false,
                                        "isPartial" : false,
                                        "indexVersion" : 2,
                                        "direction" : "forward",
                                        "indexBounds" : {
                                                "restaurant_id" : [
                                                        "[\"41098650\", \"41098650\"]"
                                                ]
                                        }
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-GODHJ1I",
                "port" : 27017,
                "version" : "4.0.4",
                "gitVersion" : "f288a3bdf201007f3693c58e140056adf8b04839"
        },
        "ok" : 1
}

=========================================================================================================

Point 4. . Create a partial index on cuisine field which will be used only when filtering on borough equal to “Staten Island”:
db.restaurants.find({ borough: "Staten Island", cuisine: "American" }) – uses index
db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }) – does not use index
db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }) – does not use index 

Create Index
db.restaurants.createIndex({ cuisine: 1 }, { partialFilterExpression: {borough: { $eq: "Staten Island" }} })

Query db.restaurants.getIndexes()
Result 
{
        "v" : 2,
        "key" : {
                "cuisine" : 1
        },
        "name" : "cuisine_1",
        "ns" : "frontcamp.restaurants",
        "partialFilterExpression" : {
                "borough" : {
                        "$eq" : "Staten Island"
                }
        }
}

Query db.restaurants.find({ borough: "Staten Island", cuisine: "American" }).explain()
Result
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "borough" : {
                                                "$eq" : "Staten Island"
                                        }
                                },
                                {
                                        "cuisine" : {
                                                "$eq" : "American"
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "filter" : {
                                "borough" : {
                                        "$eq" : "Staten Island"
                                }
                        },
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "cuisine" : 1
                                },
                                "indexName" : "cuisine_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "cuisine" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : true,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "cuisine" : [
                                                "[\"American\", \"American\"]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-GODHJ1I",
                "port" : 27017,
                "version" : "4.0.4",
                "gitVersion" : "f288a3bdf201007f3693c58e140056adf8b04839"
        },
        "ok" : 1
}

Query db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" })
Result
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "borough" : {
                                                "$eq" : "Staten Island"
                                        }
                                },
                                {
                                        "name" : {
                                                "$eq" : "Babel Land"
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "$and" : [
                                        {
                                                "borough" : {
                                                        "$eq" : "Staten Island"
                                                }
                                        },
                                        {
                                                "name" : {
                                                        "$eq" : "Babel Land"
                                                }
                                        }
                                ]
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-GODHJ1I",
                "port" : 27017,
                "version" : "4.0.4",
                "gitVersion" : "f288a3bdf201007f3693c58e140056adf8b04839"
        },
        "ok" : 1
}

Query db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }).explain()
Result
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "$and" : [
                                {
                                        "borough" : {
                                                "$eq" : "Queens"
                                        }
                                },
                                {
                                        "cuisne" : {
                                                "$eq" : "Pizza"
                                        }
                                }
                        ]
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "$and" : [
                                        {
                                                "borough" : {
                                                        "$eq" : "Queens"
                                                }
                                        },
                                        {
                                                "cuisne" : {
                                                        "$eq" : "Pizza"
                                                }
                                        }
                                ]
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-GODHJ1I",
                "port" : 27017,
                "version" : "4.0.4",
                "gitVersion" : "f288a3bdf201007f3693c58e140056adf8b04839"
        },
        "ok" : 1
}

=========================================================================================================

Point 5. Create an index to make query from task 3.4 covered and provide proof (from explain() or Compass UI) that it is
indeed covered.

Create Index
db.restaurants.createIndex({ "grades.8.score": 1 }, { sparse: true })
getIndexes()
{
        "v" : 2,
        "key" : {
                "grades.8.score" : 1
        },
        "name" : "grades.8.score_1",
        "ns" : "frontcamp.restaurants",
        "sparse" : true
}

Query db.restaurants.find({ "grades.8.score": { $lt: 7 }}, { name: 1, _id: 0 }).explain()
Result
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "grades.8.score" : {
                                "$lt" : 7
                        }
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "name" : 1,
                                "_id" : 0
                        },
                        "inputStage" : {
                                "stage" : "FETCH",
                                "inputStage" : {
                                        "stage" : "IXSCAN",
                                        "keyPattern" : {
                                                "grades.8.score" : 1
                                        },
                                        "indexName" : "grades.8.score_1",
                                        "isMultiKey" : true,
                                        "multiKeyPaths" : {
                                                "grades.8.score" : [
                                                        "grades"
                                                ]
                                        },
                                        "isUnique" : false,
                                        "isSparse" : true,
                                        "isPartial" : false,
                                        "indexVersion" : 2,
                                        "direction" : "forward",
                                        "indexBounds" : {
                                                "grades.8.score" : [
                                                        "[-inf.0, 7.0)"
                                                ]
                                        }
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-GODHJ1I",
                "port" : 27017,
                "version" : "4.0.4",
                "gitVersion" : "f288a3bdf201007f3693c58e140056adf8b04839"
        },
        "ok" : 1
}